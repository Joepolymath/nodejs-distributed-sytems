/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: recipe.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace recipe {
    export class Recipe extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            steps?: string;
            ingredients?: Ingredient[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("steps" in data && data.steps != undefined) {
                    this.steps = data.steps;
                }
                if ("ingredients" in data && data.ingredients != undefined) {
                    this.ingredients = data.ingredients;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get steps() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set steps(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ingredients() {
            return pb_1.Message.getRepeatedWrapperField(this, Ingredient, 4) as Ingredient[];
        }
        set ingredients(value: Ingredient[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            steps?: string;
            ingredients?: ReturnType<typeof Ingredient.prototype.toObject>[];
        }): Recipe {
            const message = new Recipe({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.steps != null) {
                message.steps = data.steps;
            }
            if (data.ingredients != null) {
                message.ingredients = data.ingredients.map(item => Ingredient.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                steps?: string;
                ingredients?: ReturnType<typeof Ingredient.prototype.toObject>[];
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.steps != null) {
                data.steps = this.steps;
            }
            if (this.ingredients != null) {
                data.ingredients = this.ingredients.map((item: Ingredient) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.steps.length)
                writer.writeString(3, this.steps);
            if (this.ingredients.length)
                writer.writeRepeatedMessage(4, this.ingredients, (item: Ingredient) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Recipe {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Recipe();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.steps = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.ingredients, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Ingredient.deserialize(reader), Ingredient));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Recipe {
            return Recipe.deserialize(bytes);
        }
    }
    export class Ingredient extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            quantity?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set quantity(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            quantity?: string;
        }): Ingredient {
            const message = new Ingredient({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                quantity?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.quantity.length)
                writer.writeString(3, this.quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ingredient {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ingredient();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.quantity = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ingredient {
            return Ingredient.deserialize(bytes);
        }
    }
    export class RecipeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): RecipeRequest {
            const message = new RecipeRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecipeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecipeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecipeRequest {
            return RecipeRequest.deserialize(bytes);
        }
    }
    export class Meta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pid" in data && data.pid != undefined) {
                    this.pid = data.pid;
                }
            }
        }
        get pid() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pid(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            pid?: number;
        }): Meta {
            const message = new Meta({});
            if (data.pid != null) {
                message.pid = data.pid;
            }
            return message;
        }
        toObject() {
            const data: {
                pid?: number;
            } = {};
            if (this.pid != null) {
                data.pid = this.pid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pid != 0)
                writer.writeInt32(2, this.pid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Meta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Meta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.pid = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Meta {
            return Meta.deserialize(bytes);
        }
    }
    export class Empty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Empty {
            const message = new Empty({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRecipeServiceService {
        static definition = {
            GetRecipe: {
                path: "/recipe.RecipeService/GetRecipe",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RecipeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RecipeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Recipe) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Recipe.deserialize(new Uint8Array(bytes))
            },
            GetMetaData: {
                path: "/recipe.RecipeService/GetMetaData",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Meta) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Meta.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetRecipe(call: grpc_1.ServerUnaryCall<RecipeRequest, Recipe>, callback: grpc_1.sendUnaryData<Recipe>): void;
        abstract GetMetaData(call: grpc_1.ServerUnaryCall<Empty, Meta>, callback: grpc_1.sendUnaryData<Meta>): void;
    }
    export class RecipeServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedRecipeServiceService.definition, "RecipeService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetRecipe: GrpcUnaryServiceInterface<RecipeRequest, Recipe> = (message: RecipeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Recipe>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Recipe>, callback?: grpc_1.requestCallback<Recipe>): grpc_1.ClientUnaryCall => {
            return super.GetRecipe(message, metadata, options, callback);
        };
        GetMetaData: GrpcUnaryServiceInterface<Empty, Meta> = (message: Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Meta>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Meta>, callback?: grpc_1.requestCallback<Meta>): grpc_1.ClientUnaryCall => {
            return super.GetMetaData(message, metadata, options, callback);
        };
    }
}
